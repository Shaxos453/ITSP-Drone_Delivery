// Generated by gencpp from file offb/DeliveryRequest.msg
// DO NOT EDIT!


#ifndef OFFB_MESSAGE_DELIVERYREQUEST_H
#define OFFB_MESSAGE_DELIVERYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace offb
{
template <class ContainerAllocator>
struct DeliveryRequest_
{
  typedef DeliveryRequest_<ContainerAllocator> Type;

  DeliveryRequest_()
    : delivered(false)
    , DroneID()  {
    }
  DeliveryRequest_(const ContainerAllocator& _alloc)
    : delivered(false)
    , DroneID(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _delivered_type;
  _delivered_type delivered;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _DroneID_type;
  _DroneID_type DroneID;





  typedef boost::shared_ptr< ::offb::DeliveryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offb::DeliveryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DeliveryRequest_

typedef ::offb::DeliveryRequest_<std::allocator<void> > DeliveryRequest;

typedef boost::shared_ptr< ::offb::DeliveryRequest > DeliveryRequestPtr;
typedef boost::shared_ptr< ::offb::DeliveryRequest const> DeliveryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offb::DeliveryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offb::DeliveryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offb::DeliveryRequest_<ContainerAllocator1> & lhs, const ::offb::DeliveryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.delivered == rhs.delivered &&
    lhs.DroneID == rhs.DroneID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offb::DeliveryRequest_<ContainerAllocator1> & lhs, const ::offb::DeliveryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offb

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::offb::DeliveryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb::DeliveryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb::DeliveryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb::DeliveryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb::DeliveryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb::DeliveryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offb::DeliveryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d8d6669498600bd72aac3fce1f97272";
  }

  static const char* value(const ::offb::DeliveryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d8d6669498600bdULL;
  static const uint64_t static_value2 = 0x72aac3fce1f97272ULL;
};

template<class ContainerAllocator>
struct DataType< ::offb::DeliveryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb/DeliveryRequest";
  }

  static const char* value(const ::offb::DeliveryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offb::DeliveryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool delivered\n"
"string DroneID\n"
;
  }

  static const char* value(const ::offb::DeliveryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offb::DeliveryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.delivered);
      stream.next(m.DroneID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeliveryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offb::DeliveryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offb::DeliveryRequest_<ContainerAllocator>& v)
  {
    s << indent << "delivered: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.delivered);
    s << indent << "DroneID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.DroneID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFB_MESSAGE_DELIVERYREQUEST_H
