// Generated by gencpp from file offb/WpList.msg
// DO NOT EDIT!


#ifndef OFFB_MESSAGE_WPLIST_H
#define OFFB_MESSAGE_WPLIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <offb/Waypoint.h>

namespace offb
{
template <class ContainerAllocator>
struct WpList_
{
  typedef WpList_<ContainerAllocator> Type;

  WpList_()
    : wpList()  {
    }
  WpList_(const ContainerAllocator& _alloc)
    : wpList(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::offb::Waypoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::offb::Waypoint_<ContainerAllocator> >::other >  _wpList_type;
  _wpList_type wpList;





  typedef boost::shared_ptr< ::offb::WpList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offb::WpList_<ContainerAllocator> const> ConstPtr;

}; // struct WpList_

typedef ::offb::WpList_<std::allocator<void> > WpList;

typedef boost::shared_ptr< ::offb::WpList > WpListPtr;
typedef boost::shared_ptr< ::offb::WpList const> WpListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offb::WpList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offb::WpList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offb::WpList_<ContainerAllocator1> & lhs, const ::offb::WpList_<ContainerAllocator2> & rhs)
{
  return lhs.wpList == rhs.wpList;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offb::WpList_<ContainerAllocator1> & lhs, const ::offb::WpList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offb

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::offb::WpList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb::WpList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb::WpList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb::WpList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb::WpList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb::WpList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offb::WpList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57a0d486fa524923c4fc169d083620b1";
  }

  static const char* value(const ::offb::WpList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57a0d486fa524923ULL;
  static const uint64_t static_value2 = 0xc4fc169d083620b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::offb::WpList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb/WpList";
  }

  static const char* value(const ::offb::WpList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offb::WpList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb/Waypoint[] wpList\n"
"\n"
"================================================================================\n"
"MSG: offb/Waypoint\n"
"# Waypoint.msg\n"
"#\n"
"# ROS representation of MAVLink MISSION_ITEM\n"
"# See mavlink documentation\n"
"\n"
"\n"
"\n"
"# see enum MAV_FRAME\n"
"uint8 frame\n"
"uint8 FRAME_GLOBAL = 0\n"
"uint8 FRAME_LOCAL_NED = 1\n"
"uint8 FRAME_MISSION = 2\n"
"uint8 FRAME_GLOBAL_REL_ALT = 3\n"
"uint8 FRAME_LOCAL_ENU = 4\n"
"\n"
"# see enum MAV_CMD and CommandCode.msg\n"
"uint16 command\n"
"\n"
"bool is_current\n"
"bool autocontinue\n"
"# meaning of this params described in enum MAV_CMD\n"
"float32 param1\n"
"float32 param2\n"
"float32 param3\n"
"float32 param4\n"
"float64 x_lat\n"
"float64 y_long\n"
"float64 z_alt\n"
;
  }

  static const char* value(const ::offb::WpList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offb::WpList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wpList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WpList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offb::WpList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offb::WpList_<ContainerAllocator>& v)
  {
    s << indent << "wpList[]" << std::endl;
    for (size_t i = 0; i < v.wpList.size(); ++i)
    {
      s << indent << "  wpList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::offb::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.wpList[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFB_MESSAGE_WPLIST_H
